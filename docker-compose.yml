services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Porta para conexão AMQP
      - "15672:15672" # Porta para interface de gerenciamento do RabbitMQ
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - mynetwork

  producer:
    build:
      context: ./producer  # Caminho para o diretório do producer
      dockerfile: Dockerfile
    container_name: producer
    ports:
      - "8081:8080"  # Mapeia a porta 8080 do contêiner para 8081 no host
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_PROFILES_ACTIVE: docker

  consumer:
    build:
      context: ./consumer  # Caminho para o diretório do consumer
      dockerfile: Dockerfile
    container_name: consumer
    ports:
      - "8082:8080"  # Mapeia a porta 8080 do contêiner para 8082 no host
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - mynetwork
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/mydb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_PROFILES_ACTIVE: docker
#    entrypoint: ["/bin/sh", "/wait-for-queue.sh"]

networks:
  mynetwork:
    driver: bridge